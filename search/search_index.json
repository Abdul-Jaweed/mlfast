{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"mlfast","text":"<p>This Python machine learning package is built on top of scikit-learn and provides a simple API for regression and classification modeling. The main function in this package is called Regression() and Classification() which takes in the following arguments:</p> <p><code>X</code>: The independent variables (features) of the data set</p> <p><code>y</code>: The dependent variable (target) of the data set</p> <p><code>model</code>: The name of the regression and classification algorithm to be used (e.g. <code>lr</code> for Linear Regression, or <code>rf</code> for Random Forest Classifier, etc.)</p> <p><code>scaler</code>: The name of the data scaler to be used (e.g. \"standard\" for StandardScaler, \"robust\" for RobustScaler, etc.)</p> <p><code>cat</code>: A boolean indicating [<code>True</code> or <code>False</code>] whether the data set has categorical variables that need to be one-hot encoded</p> <ul> <li>PYPI link for this package - mlfast</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#installations","title":"Installations","text":"<p>Installation steps</p> <p>First let's do an easy pip installation of the library by running the following command - <pre><code>pip install mlfast\n</code></pre></p>"},{"location":"#usage","title":"Usage","text":""},{"location":"#regression-algorithms","title":"Regression Algorithms","text":"<p>For Regression Modeling</p> <p>Import Regression Model - <pre><code>from mlfast import Regression\n</code></pre></p> <p>Linear Regression  -&gt; 'lr'  <pre><code>Regression(X, y, model = 'lr')\n</code></pre></p> <p>Ridge Regression  -&gt; 'ridge '  <pre><code>Regression(X, y, model = 'ridge', scaler =  'standard')\n</code></pre></p> <p>Lasso Regression  -&gt; 'lasso'  <pre><code>Regression(X, y, model = 'lasso', scaler =  'robust')\n</code></pre></p> <p>ElasticNet  -&gt; 'enet'  <pre><code>Regression(X, y, model = 'enet', cat=True)\n</code></pre></p> <p>Random Forest Regressor  -&gt; 'rf'  <pre><code>Regression(X, y, model = 'rf',scaler = 'standard', cat=True)\n</code></pre></p> <p>Decision Tree Regressor  -&gt; 'dt'  <pre><code>Regression(X, y, model = 'dt')\n</code></pre></p> <p>Support Vector Machine Regression  -&gt; 'svm '  <pre><code>Regression(X, y, model = 'svm', scaler =  'standard')\n</code></pre></p> <p>KNeighbors Regressor  -&gt; 'knn'  <pre><code>Regression(X, y, model = 'knn', scaler =  'robust')\n</code></pre></p> <p>Gradient Boosting Regressor  -&gt; 'gb'  <pre><code>Regression(X, y, model = 'gb', cat=True)\n</code></pre></p> <p>AdaBoost Regressor  -&gt; 'ada'  <pre><code>Regression(X, y, model = 'ada',scaler = 'standard', cat=True)\n</code></pre></p> <p>XGBoost Regressor  -&gt; 'xbg'  <pre><code>Regression(X, y, model = 'xbg',scaler = 'standard', cat=True)\n</code></pre></p>"},{"location":"#classification-algorithms","title":"Classification Algorithms","text":"<p>For Classification Modeling</p> <p>Import Classification Model - <pre><code>from mlfast import Classification\n</code></pre></p> <p>Logistic Regression  -&gt; 'lr'  <pre><code>Classification(X, y, model = 'lr')\n</code></pre></p> <p>Random Forest Classifier  -&gt; 'rf'  <pre><code>Classification(X, y, model = 'rf',scaler = 'standard', cat=True)\n</code></pre></p> <p>Decision Tree Classifier  -&gt; 'dt'  <pre><code>Classification(X, y, model = 'dt')\n</code></pre></p> <p>Support Vector Machine Classifier  -&gt; 'svm '  <pre><code>Classification(X, y, model = 'svm', scaler =  'standard')\n</code></pre></p> <p>KNeighbors Classifier  -&gt; 'knn'  <pre><code>Classification(X, y, model = 'knn', scaler =  'robust')\n</code></pre></p> <p>Gradient Boosting Classifier  -&gt; 'gb'  <pre><code>Classification(X, y, model = 'gb', cat=True)\n</code></pre></p> <p>AdaBoost Classifier  -&gt; 'ada'  <pre><code>Classification(X, y, model = 'ada',scaler = 'standard', cat=True)\n</code></pre></p> <p>XGBoost Classifier  -&gt; 'xbg'</p> <pre><code>Classification(X, y, model = 'xbg',scaler = 'standard', cat=True)\n</code></pre>"},{"location":"#text-preprocessing","title":"Text Preprocessing","text":"<p>The provided code snippet applies Text Preprocessing to a series or column of text data. It allows for flexible control over different preprocessing steps through boolean flags. Here is a summary of the options:</p> <ul> <li><code>stem</code>: Determines whether stemming should be performed. Set to <code>True</code> to enable stemming, or <code>False</code> to disable it.</li> <li><code>lemmatize</code>: Controls lemmatization. Set to <code>True</code> to enable lemmatization, or <code>False</code> to disable it.</li> <li><code>remove_html</code>: Specifies whether HTML tags should be removed. Use <code>True</code> to remove HTML tags, or <code>False</code> to keep them.</li> <li><code>remove_emoji</code>: Determines whether emojis should be removed from the text. Set to <code>True</code> to remove emojis, or <code>False</code> to retain them.</li> <li><code>remove_special_chars</code>: Controls the removal of special characters. Use <code>True</code> to remove special characters, or <code>False</code> to keep them.</li> <li><code>remove_extra_spaces</code>: Specifies whether extra spaces should be removed. Set to <code>True</code> to remove extra spaces, or <code>False</code> to keep them.</li> </ul> <p>By setting these flags to either <code>True</code> or <code>False</code>, you can customize the preprocessing steps according to your requirements. The code applies the specified preprocessing steps to each text element in the series or column and returns the processed text.</p> <p>Text preprocessing sample code</p> <pre><code>from mlfast import Text_preprocessing\ndf['review'].apply(Text_preprocessing,\nstem=False,\nlemmatize=True,\nremove_html=True,\nremove_emoji=True,\nremove_special_chars=True,\nremove_extra_spaces=True)\n</code></pre>"},{"location":"#chatbot","title":"Chatbot","text":"<p>Import the <code>Chatbot</code> class: In your Python script, import the <code>Chatbot</code> class from <code>mlfast</code>. You can do this by adding the following line at the beginning of your code:</p> <pre><code>from mlfast import Chatbot\n</code></pre> <ul> <li> <p>Obtain an OpenAI API key: To use the <code>mlfast</code> library, you'll need an API key from OpenAI. If you don't have one, sign up on the OpenAI website and obtain an API key.</p> </li> <li> <p>Create a <code>Chatbot</code> instance: Initialize the Chatbot class with your OpenAI API key and specify the desired role for your chatbot. Here's an example of creating a <code>Chatbot</code> instance:</p> </li> <li> <p>Replace <code>\"YOUR-OPENAI-API-KEY\"</code> with your actual OpenAI API key, and <code>\"ENTER-YOUR-CHATBOT-ROLE\"</code> with the desired role for your chatbot.</p> </li> <li> <p>Deploy the chatbot: Set the <code>deploy</code> parameter to <code>True</code> when creating the <code>Chatbot</code> instance. This will deploy the chatbot and make it available for use.</p> </li> <li> <p>To deploy or terminate the deployment of a chatbot created using the <code>mlfast</code> library, you can set the <code>deploy</code> parameter to <code>True</code> or <code>False</code> when creating the <code>Chatbot</code> instance, respectively.</p> </li> </ul> <pre><code>Chatbot(api_key=\"YOUR-OPENAI-API-KEY\",\nrole=\"ENTER-YOUR-CHATBOT-ROLE\",\ndeploy=True)\n</code></pre>"},{"location":"#announcement","title":"Announcement","text":"<ul> <li>Unsupervised Machine Learning Algorithms</li> <li>Hyperparameter Tuning</li> <li>Bag of words, TFIDF and Word2Vec</li> <li>Image Preprocessing</li> <li>And many more</li> </ul> <p>ADDED SOON</p>"}]}